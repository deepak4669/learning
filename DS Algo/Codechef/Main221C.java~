import java.util.*;
import java.io.*;
//267630EY
public class Main221C
{
  static PrintWriter out=new PrintWriter(System.out);
  static int[] a;
  public static int inversions(int[] a,int lo, int hi)
  {
    if(lo<=hi) return 0;
    int mid=(lo)+(hi-lo)/2;
    int x=inversions(a,lo,mid);
    int y=inversions(a,mid+1,hi);
    int z=merge(a,lo,mid,hi);
    return x+y+z;
  }
  public static int merge(int[] a,int lo,int mid,int hi)
  {
    int[] aux=new int[a.length];
    for(int i=lo;i<=hi;i++)
      aux[i]=a[i];
    int i=0;
    int j=mid+1;
    int count=0;
    for(int k=lo;k<=hi;k++)
    {
      if(i==mid) a[k]=a[j++];
      else if(j==n) a[k]=a[i++];
      if(aux[i]<=aux[j])
        a[k]=aux[i++];
      else if(aux[i]>aux[j])
      {
        count+=(mid-i+1);
        a[k]=aux[j++];
      }
    }
    return count;
  }
      
    
  
  
  public static void main(String[] args) throws IOException
  {
    Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    a=sc.nextIntArray(n);
    int inv=inversions(a,0,n-1);
    out.println(inv);
    out.flush();
    
    
    
  }
  static class Scanner
  {
    BufferedReader br;
    StringTokenizer tk=new StringTokenizer("");
    public Scanner(InputStream is) 
        {
      br=new BufferedReader(new InputStreamReader(is));
    }
        public int nextInt() throws IOException
        {
          if(tk.hasMoreTokens())
                return Integer.parseInt(tk.nextToken());
          tk=new StringTokenizer(br.readLine());
          return nextInt();
        }
        public long nextLong() throws IOException
        {
            if(tk.hasMoreTokens())
              return Long.parseLong(tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return nextLong();
        }
        public String next() throws IOException
        {
          if(tk.hasMoreTokens())
            return (tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return next();
        }
        public String nextLine() throws IOException
        {
          tk=new StringTokenizer("");
          return br.readLine();
        }
        public double nextDouble() throws IOException
        {
            if(tk.hasMoreTokens())
              return Double.parseDouble(tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return nextDouble();
        }
        public char nextChar() throws IOException
        {
            if(tk.hasMoreTokens())
              return (tk.nextToken().charAt(0));
            tk=new StringTokenizer(br.readLine());
            return nextChar();
        }
        public int[] nextIntArray(int n) throws IOException
        {
            int a[]=new int[n];
            for(int i=0;i<n;i++)
              a[i]=nextInt();
            return a;
        }
        public long[] nextLongArray(int n) throws IOException
        {
          long a[]=new long[n];
            for(int i=0;i<n;i++)
              a[i]=nextLong();
            return a;
        }
        public int[] nextIntArrayOneBased(int n) throws IOException
        {
          int a[]=new int[n+1];
            for(int i=1;i<=n;i++)
              a[i]=nextInt();
            return a;
        }
        public long[] nextLongArrayOneBased(int n) throws IOException
        {
          long a[]=new long[n+1];
          for(int i=1;i<=n;i++)
                a[i]=nextLong();
          return a;
        }
  }
}

