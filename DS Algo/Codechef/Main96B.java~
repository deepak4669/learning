import java.util.*;
import java.io.*;

public class Main96B
{
  static PrintWriter out=new PrintWriter(System.out);
  private static Comparable[] nextPermutation( final Comparable[] c ) {
  // 1. finds the largest k, that c[k] < c[k+1]
  int first = getFirst( c );
  if ( first == -1 ) return null; // no greater permutation
  // 2. find last index toSwap, that c[k] < c[toSwap]
  int toSwap = c.length - 1;
  while ( c[ first ].compareTo( c[ toSwap ] ) >= 0 )
   --toSwap;
  // 3. swap elements with indexes first and last
  swap( c, first++, toSwap );
  // 4. reverse sequence from k+1 to n (inclusive) 
  toSwap = c.length - 1;
  while ( first < toSwap )
   swap( c, first++, toSwap-- );
  return c;
 }
  private static int getFirst( final Comparable[] c ) {
  for ( int i = c.length - 2; i >= 0; --i )
   if ( c[ i ].compareTo( c[ i + 1 ] ) < 0 )
    return i;
  return -1;
 }

 // swaps two elements (with indexes i and j) in array 
 private static void swap( final Comparable[] c, final int i, final int j ) {
  final Comparable tmp = c[ i ];
  c[ i ] = c[ j ];
  c[ j ] = tmp;
 }
  
  public static void main(String[] args) throws IOException
  {
    Scanner sc=new Scanner(System.in);
    String n=sc.next();
    String ans="";
    if(n.length()%2==0)
    {
      String max="";
      for(int i=0;i<s.length()/2;i++)
        max+="7";
      for(int i=0;i<s.length()/2;i++)
        max+="4";
      if(Integer.parseInt(n)>=Integer.parseInt(s))
      {
        int x=(n.length()+2)/2;
        for(int i=0;i<x;i++)
          ans+="4";
        for(int i=0;i<x;i++)
          ans+="7";
      }
      else
      {
        int x=n.length()/2;
        int[] a=new int[2*x];
        for(int i=0;i<x;i++)
          a[i]="4";
        for(int i=0;i<x;i++)
          a[i]="7";
        while(a=nextPermutation(a)!=null)
          out.println(Arrays.toString(a));
      }
    }
    out.flush();
        
        
    
    
  }
  static class Scanner
  {
    BufferedReader br;
    StringTokenizer tk=new StringTokenizer("");
    public Scanner(InputStream is) 
        {
      br=new BufferedReader(new InputStreamReader(is));
    }
        public int nextInt() throws IOException
        {
          if(tk.hasMoreTokens())
                return Integer.parseInt(tk.nextToken());
          tk=new StringTokenizer(br.readLine());
          return nextInt();
        }
        public long nextLong() throws IOException
        {
            if(tk.hasMoreTokens())
              return Long.parseLong(tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return nextLong();
        }
        public String next() throws IOException
        {
          if(tk.hasMoreTokens())
            return (tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return next();
        }
        public String nextLine() throws IOException
        {
          tk=new StringTokenizer("");
          return br.readLine();
        }
        public double nextDouble() throws IOException
        {
            if(tk.hasMoreTokens())
              return Double.parseDouble(tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return nextDouble();
        }
        public char nextChar() throws IOException
        {
            if(tk.hasMoreTokens())
              return (tk.nextToken().charAt(0));
            tk=new StringTokenizer(br.readLine());
            return nextChar();
        }
        public int[] nextIntArray(int n) throws IOException
        {
            int a[]=new int[n];
            for(int i=0;i<n;i++)
              a[i]=nextInt();
            return a;
        }
        public long[] nextLongArray(int n) throws IOException
        {
          long a[]=new long[n];
            for(int i=0;i<n;i++)
              a[i]=nextLong();
            return a;
        }
        public int[] nextIntArrayOneBased(int n) throws IOException
        {
          int a[]=new int[n+1];
            for(int i=1;i<=n;i++)
              a[i]=nextInt();
            return a;
        }
        public long[] nextLongArrayOneBased(int n) throws IOException
        {
          long a[]=new long[n+1];
          for(int i=1;i<=n;i++)
                a[i]=nextLong();
          return a;
        }
  }
}

