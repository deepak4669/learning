import java.util.*;
import java.io.*;
//267630EY
public class Blocks
{
  static PrintWriter out=new PrintWriter(System.out);
  static int nmax=1000000;
  static class segmentTree
  {
    int N;
    int[] t;
    public segmentTree(int n,int[] a)
    {
      this.N=n;
      t=new int[4*N];
      build(a,1,0,a.length-1);
    }
    public void build(int[] a,int v,int tl,int tr)
    {
      if(tl==tr) t[v]=a[tl];
      else
      {
        int tm=(tl+tr)/2;
        build(a,2*v,tl,tm);
        build(a,2*v+1,tm+1,tr);
        t[v]=Math.max(t[2*v],t[2*v+1]);
      }
    }
    public int query(int v,int tl,int tr,int l,int r)
    {
      if(l>r)
        return 0;
      if(l==tl&&r==tr)
        return t[v];
      int tm=(tl+tr)/2;
      return Math.max(query(2*v,tl,tm,l,min(r,tm)),query(2*v+1,tm+1,tr,max(l,tm+1),r));
    }
    public void update(int v,int tl,int tr,int pos,int val)
    {
      if(tl==tr)
        t[v]=val;
      else
      {
        int tm=(tl+tr)/2;
        if(pos<=tm)
          update(2*v,tl,tm,pos,val);
        else
          update(2*v+1,tm+1,tr,pos,val);
        t[v]=t[2*v]+t[2*v+1];
      }
    }
  }
          
    
      
  
  
  public static void main(String[] args) throws IOException
  {
    Scanner sc=new Scanner(System.in);
    int[] a=new int[nmax];
    segmentTree tr=new segmentTree(nmax,a);
    int n=sc.nextInt();
    while(n-->0)
    {
      int l=sc.nextInt();
      int h=sc.nextInt();
      int p=sc.nextInt();
      int c=sc.nextInt();
      int x=sc.nextInt();
      if(c==1)
      {
        for(int i=x;i<=(x+l-1);i++)
        {
          if(i!=p)
          {
            tr.update(1,0,a.length-1,i,a[i]+1);
            a[i]++;
          }
          else
          {
            tr.update(1,0,a.length-1,i,a[i]+h);
            a[i]+=h;
          }
        }
      }
      else
      {
        for(int i=x;i<=(x+l-1);i++)
        {
          tr.update(1,0,a.length-1,i,a[i]+h);
          a[i]=a[i]+h;
        }
      }
    }
    out.println(tr.query(1,0,a.length-1,0,a.length-1));
    out.flush();
  
  }
  static class Scanner
  {
    BufferedReader br;
    StringTokenizer tk=new StringTokenizer("");
    public Scanner(InputStream is) 
        {
      br=new BufferedReader(new InputStreamReader(is));
    }
        public int nextInt() throws IOException
        {
          if(tk.hasMoreTokens())
                return Integer.parseInt(tk.nextToken());
          tk=new StringTokenizer(br.readLine());
          return nextInt();
        }
        public long nextLong() throws IOException
        {
            if(tk.hasMoreTokens())
              return Long.parseLong(tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return nextLong();
        }
        public String next() throws IOException
        {
          if(tk.hasMoreTokens())
            return (tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return next();
        }
        public String nextLine() throws IOException
        {
          tk=new StringTokenizer("");
          return br.readLine();
        }
        public double nextDouble() throws IOException
        {
            if(tk.hasMoreTokens())
              return Double.parseDouble(tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return nextDouble();
        }
        public char nextChar() throws IOException
        {
            if(tk.hasMoreTokens())
              return (tk.nextToken().charAt(0));
            tk=new StringTokenizer(br.readLine());
            return nextChar();
        }
        public int[] nextIntArray(int n) throws IOException
        {
            int a[]=new int[n];
            for(int i=0;i<n;i++)
              a[i]=nextInt();
            return a;
        }
        public long[] nextLongArray(int n) throws IOException
        {
          long a[]=new long[n];
            for(int i=0;i<n;i++)
              a[i]=nextLong();
            return a;
        }
        public int[] nextIntArrayOneBased(int n) throws IOException
        {
          int a[]=new int[n+1];
            for(int i=1;i<=n;i++)
              a[i]=nextInt();
            return a;
        }
        public long[] nextLongArrayOneBased(int n) throws IOException
        {
          long a[]=new long[n+1];
          for(int i=1;i<=n;i++)
                a[i]=nextLong();
          return a;
        }
  }
}

