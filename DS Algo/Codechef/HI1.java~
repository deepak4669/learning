import java.util.*;
import java.io.*;
//267630EY
public class HI1
{
  static PrintWriter out=new PrintWriter(System.out);
  
  
  public static void main(String[] args) throws IOException
  {
    Scanner sc=new Scanner(System.in);
    String a=sc.next();
    String b=sc.next();
    HashMap<Character,Integer> s1=new HashMap<String,Integer>();
    HashMap<Character,Integer> s2=new HashMap<String,Integer>();
    for(int i=0;i<a.length();i++)
    {
      if(s1.containsKey(a.charAt(i)))
        s1.put(a.charAt(i),s1.get(a.charAt(i))+1);
      else
        s1.put(a.charAt(i),1);
    }
    boolean flag=true;
    for(int i=0;i<b.length();i++)
    {
      if(s2.containsKey(b.charAt(i)))
        s2.put(b.charAt(i),s2.get(b.charAt(i))+1);
      else
        s2.put(b.charAt(i),1);
    }
    for(String s:s2.keySet())
    {
      if(s1.containsKey(s))
      {
        if(s1.get(s)<s2.get(s))
        {
          flag=false;
          break;
        }
      }
      else
      {
        flag=false;
        break;
      }
    }
    if(!false)
      out.println("NO");
    else
    {
      out.println("YES");
      out.println(a.length()-b.length());
    }
    out.flush();
            
    
    
    
    
  }
  static class Scanner
  {
    BufferedReader br;
    StringTokenizer tk=new StringTokenizer("");
    public Scanner(InputStream is) 
        {
      br=new BufferedReader(new InputStreamReader(is));
    }
        public int nextInt() throws IOException
        {
          if(tk.hasMoreTokens())
                return Integer.parseInt(tk.nextToken());
          tk=new StringTokenizer(br.readLine());
          return nextInt();
        }
        public long nextLong() throws IOException
        {
            if(tk.hasMoreTokens())
              return Long.parseLong(tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return nextLong();
        }
        public String next() throws IOException
        {
          if(tk.hasMoreTokens())
            return (tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return next();
        }
        public String nextLine() throws IOException
        {
          tk=new StringTokenizer("");
          return br.readLine();
        }
        public double nextDouble() throws IOException
        {
            if(tk.hasMoreTokens())
              return Double.parseDouble(tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return nextDouble();
        }
        public char nextChar() throws IOException
        {
            if(tk.hasMoreTokens())
              return (tk.nextToken().charAt(0));
            tk=new StringTokenizer(br.readLine());
            return nextChar();
        }
        public int[] nextIntArray(int n) throws IOException
        {
            int a[]=new int[n];
            for(int i=0;i<n;i++)
              a[i]=nextInt();
            return a;
        }
        public long[] nextLongArray(int n) throws IOException
        {
          long a[]=new long[n];
            for(int i=0;i<n;i++)
              a[i]=nextLong();
            return a;
        }
        public int[] nextIntArrayOneBased(int n) throws IOException
        {
          int a[]=new int[n+1];
            for(int i=1;i<=n;i++)
              a[i]=nextInt();
            return a;
        }
        public long[] nextLongArrayOneBased(int n) throws IOException
        {
          long a[]=new long[n+1];
          for(int i=1;i<=n;i++)
                a[i]=nextLong();
          return a;
        }
  }
}

