import java.util.*;
import java.io.*;
//267630EY
public class Main385C
{
  static PrintWriter out=new PrintWriter(System.out);
  static int[] X;
  static boolean prime[];
  static int N=10000000;
  static void sieve()
  {
    prime=new boolean[N+1];
    Arrays.fill(prime,true);
    prime[0]=false;
    prime[1]=false;
    int m=(int)Math.sqrt(N);
    for(int i=1;i<=N;i++)
    {
      if(prime[i])
      {
        for(int j=i*i;j<=N;j+=i)
        {
          prime[j]=false;
        }
      }
    }
  }
  static class SegMent
  {
    int[] t;
    int N;
    public SegMent(int[] a,int n)
    {
      this.N=n;
      t=new int[4*N];
      build(1,0,n-1,a);
    }
    public void build(int v,int tl,int tr,int[] a)
    {
      if(tl==tr)
      {
        if(prime[tl]){
        for(int j=tl;j<=N;j+=tl)
        {
          if(prime[j])
          {
            t[v]+=a[j];
          }
        }
        }
      }
      else{
      int tm=(tl+tr)/2;
      build(2*v,tl,tm,a);
      build(2*v+1,tm+1,tr,a);
      t[v]=t[2*v+1]+t[2*v];
      }
    }
    public int get(int v,int tl,int tr,int l,int r)
    {
      if(l>r) return 0;
      else if(l==tl&&r==tr)
      {
        return t[v];
      }
      int tm=(tl+tr)/2;
      return get(2*v,tl,tm,l,Math.min(r,tm))+get(2*v+1,tm+1,tr,Math.max(r,tm+1),r);
    }
  }
        

        
        
    
    
          
  
  
  public static void main(String[] args) throws IOException
  {
    Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    X=new int[N+1];
    for(int i=0;i<n;i++)
    {
      int c=sc.nextInt();
      X[c]++;
    }
    SegMent tr=new SegMent(X,N);
    int m=sc.nextInt();
    while(m-->0)
    {
      int l=sc.nextInt();
      int r=sc.nextInt();
      out.println(tr.get(1,0,N-1,l,r));
    }
    out.flush();
      
    
    
    
    
  }
  static class Scanner
  {
    BufferedReader br;
    StringTokenizer tk=new StringTokenizer("");
    public Scanner(InputStream is) 
        {
      br=new BufferedReader(new InputStreamReader(is));
    }
        public int nextInt() throws IOException
        {
          if(tk.hasMoreTokens())
                return Integer.parseInt(tk.nextToken());
          tk=new StringTokenizer(br.readLine());
          return nextInt();
        }
        public long nextLong() throws IOException
        {
            if(tk.hasMoreTokens())
              return Long.parseLong(tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return nextLong();
        }
        public String next() throws IOException
        {
          if(tk.hasMoreTokens())
            return (tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return next();
        }
        public String nextLine() throws IOException
        {
          tk=new StringTokenizer("");
          return br.readLine();
        }
        public double nextDouble() throws IOException
        {
            if(tk.hasMoreTokens())
              return Double.parseDouble(tk.nextToken());
            tk=new StringTokenizer(br.readLine());
            return nextDouble();
        }
        public char nextChar() throws IOException
        {
            if(tk.hasMoreTokens())
              return (tk.nextToken().charAt(0));
            tk=new StringTokenizer(br.readLine());
            return nextChar();
        }
        public int[] nextIntArray(int n) throws IOException
        {
            int a[]=new int[n];
            for(int i=0;i<n;i++)
              a[i]=nextInt();
            return a;
        }
        public long[] nextLongArray(int n) throws IOException
        {
          long a[]=new long[n];
            for(int i=0;i<n;i++)
              a[i]=nextLong();
            return a;
        }
        public int[] nextIntArrayOneBased(int n) throws IOException
        {
          int a[]=new int[n+1];
            for(int i=1;i<=n;i++)
              a[i]=nextInt();
            return a;
        }
        public long[] nextLongArrayOneBased(int n) throws IOException
        {
          long a[]=new long[n+1];
          for(int i=1;i<=n;i++)
                a[i]=nextLong();
          return a;
        }
  }
}

