import java.util.*;
import java.io.*;
import java.lang.*;

public class DPC
{
  static int[] a;
  static int[] b;
  static int[] c;
  static int[][] dp;
  public static void main(String[] args)
  {
    Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    a=new int[n];
    b=new int[n];
    c=new int[n];
    dp=new int[4][n];
    for(int i=0;i<4;i++)
    {
      Arrays.fill(dp[i],-1);
    }
    for(int i=0;i<n;i++)
    {
      a[i]=sc.nextInt();
      b[i]=sc.nextInt();
      c[i]=sc.nextInt();
      
    }
    
    int ans=solve(-1,0);
    System.out.println(ans);
  }
  static public int solve(int prev,int x)
  {
    int n=a.length;
    if(x>=n) return 0;
    else if(prev>=0&&dp[prev+1][x]!=-1) return dp[prev][x];
    else
    {
      int ans=Integer.MIN_VALUE;
      if(prev==-1)
      {
        ans=Math.max(a[x]+solve(0,x+1),Math.max(b[x]+solve(1,x+1),c[x]+solve(2,x+1)));
      }
      else if(prev==0)
      {
        ans=Math.max(b[x]+solve(1,x+1),c[x]+solve(2,x+1));
      }
      else if(prev==1)
      {
        ans=Math.max(c[x]+solve(2,x+1),a[x]+solve(0,x+1));
      }
      else
      {
        ans=Math.max(b[x]+solve(1,x+1),a[x]+solve(0,x+1));
      }
      dp[prev+1][x]=ans;
      return ans;
    }
  }
}
        
    
